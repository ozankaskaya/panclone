{"version":3,"file":"client.js","sources":["../../../src/performance/client.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { getCurrentHub } from '@sentry/hub';\nimport { Primitive, TraceparentData, Transaction, TransactionContext } from '@sentry/types';\nimport {\n  extractTraceparentData,\n  fill,\n  getGlobalObject,\n  logger,\n  parseBaggageHeader,\n  stripUrlQueryAndFragment,\n} from '@sentry/utils';\nimport type { NEXT_DATA as NextData } from 'next/dist/next-server/lib/utils';\nimport { default as Router } from 'next/router';\nimport type { ParsedUrlQuery } from 'querystring';\n\nconst global = getGlobalObject<Window>();\n\ntype StartTransactionCb = (context: TransactionContext) => Transaction | undefined;\n\n/**\n * Describes data located in the __NEXT_DATA__ script tag. This tag is present on every page of a Next.js app.\n */\ninterface SentryEnhancedNextData extends NextData {\n  // contains props returned by `getInitialProps` - except for `pageProps`, these are the props that got returned by `getServerSideProps` or `getStaticProps`\n  props: {\n    _sentryGetInitialPropsTraceData?: string; // trace parent info, if injected by server-side `getInitialProps`\n    _sentryGetInitialPropsBaggage?: string; // baggage, if injected by server-side `getInitialProps`\n    pageProps?: {\n      _sentryGetServerSidePropsTraceData?: string; // trace parent info, if injected by server-side `getServerSideProps`\n      _sentryGetServerSidePropsBaggage?: string; // baggage, if injected by server-side `getServerSideProps`\n\n      // The following two values are only injected in a very special case with the following conditions:\n      // 1. The page's `getStaticPaths` method must have returned `fallback: 'blocking'`.\n      // 2. The requested page must be a \"miss\" in terms of \"Incremental Static Regeneration\", meaning the requested page has not been generated before.\n      // In this case, a page is requested and only served when `getStaticProps` is done. There is not even a fallback page or similar.\n      _sentryGetStaticPropsTraceData?: string; // trace parent info, if injected by server-side `getStaticProps`\n      _sentryGetStaticPropsBaggage?: string; // baggage, if injected by server-side `getStaticProps`\n    };\n  };\n}\n\ninterface NextDataTagInfo {\n  route?: string;\n  traceParentData?: TraceparentData;\n  baggage?: string;\n  params?: ParsedUrlQuery;\n}\n\n/**\n * Every Next.js page (static and dynamic ones) comes with a script tag with the id \"__NEXT_DATA__\". This script tag\n * contains a JSON object with data that was either generated at build time for static pages (`getStaticProps`), or at\n * runtime with data fetchers like `getServerSideProps.`.\n *\n * We can use this information to:\n * - Always get the parameterized route we're in when loading a page.\n * - Send trace information (trace-id, baggage) from the server to the client.\n *\n * This function extracts this information.\n */\nfunction extractNextDataTagInformation(): NextDataTagInfo {\n  let nextData: SentryEnhancedNextData | undefined;\n  // Let's be on the safe side and actually check first if there is really a __NEXT_DATA__ script tag on the page.\n  // Theoretically this should always be the case though.\n  const nextDataTag = global.document.getElementById('__NEXT_DATA__');\n  if (nextDataTag && nextDataTag.innerHTML) {\n    try {\n      nextData = JSON.parse(nextDataTag.innerHTML);\n    } catch (e) {\n      __DEBUG_BUILD__ && logger.warn('Could not extract __NEXT_DATA__');\n    }\n  }\n\n  if (!nextData) {\n    return {};\n  }\n\n  const nextDataTagInfo: NextDataTagInfo = {};\n\n  const { page, query, props } = nextData;\n\n  // `nextData.page` always contains the parameterized route\n  nextDataTagInfo.route = page;\n  nextDataTagInfo.params = query;\n\n  if (props) {\n    const { pageProps } = props;\n\n    const getInitialPropsBaggage = props._sentryGetInitialPropsBaggage;\n    const getServerSidePropsBaggage = pageProps && pageProps._sentryGetServerSidePropsBaggage;\n    const getStaticPropsBaggage = pageProps && pageProps._sentryGetStaticPropsBaggage;\n    // Ordering of the following shouldn't matter but `getInitialProps` generally runs before `getServerSideProps` or `getStaticProps` so we give it priority.\n    const baggage = getInitialPropsBaggage || getServerSidePropsBaggage || getStaticPropsBaggage;\n    if (baggage) {\n      nextDataTagInfo.baggage = baggage;\n    }\n\n    const getInitialPropsTraceData = props._sentryGetInitialPropsTraceData;\n    const getServerSidePropsTraceData = pageProps && pageProps._sentryGetServerSidePropsTraceData;\n    const getStaticPropsTraceData = pageProps && pageProps._sentryGetStaticPropsTraceData;\n    // Ordering of the following shouldn't matter but `getInitialProps` generally runs before `getServerSideProps` or `getStaticProps` so we give it priority.\n    const traceData = getInitialPropsTraceData || getServerSidePropsTraceData || getStaticPropsTraceData;\n    if (traceData) {\n      nextDataTagInfo.traceParentData = extractTraceparentData(traceData);\n    }\n  }\n\n  return nextDataTagInfo;\n}\n\nconst DEFAULT_TAGS = {\n  'routing.instrumentation': 'next-router',\n} as const;\n\nlet activeTransaction: Transaction | undefined = undefined;\nlet prevTransactionName: string | undefined = undefined;\nlet startTransaction: StartTransactionCb | undefined = undefined;\n\nconst client = getCurrentHub().getClient();\n\n/**\n * Creates routing instrumention for Next Router. Only supported for\n * client side routing. Works for Next >= 10.\n *\n * Leverages the SingletonRouter from the `next/router` to\n * generate pageload/navigation transactions and parameterize\n * transaction names.\n */\nexport function nextRouterInstrumentation(\n  startTransactionCb: StartTransactionCb,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  startTransaction = startTransactionCb;\n\n  if (startTransactionOnPageLoad) {\n    const { route, traceParentData, baggage, params } = extractNextDataTagInformation();\n\n    prevTransactionName = route || global.location.pathname;\n    const source = route ? 'route' : 'url';\n\n    activeTransaction = startTransactionCb({\n      name: prevTransactionName,\n      op: 'pageload',\n      tags: DEFAULT_TAGS,\n      ...(params && client && client.getOptions().sendDefaultPii && { data: params }),\n      ...traceParentData,\n      metadata: {\n        source,\n        ...(baggage && { baggage: parseBaggageHeader(baggage) }),\n      },\n    });\n  }\n\n  Router.ready(() => {\n    // Spans that aren't attached to any transaction are lost; so if transactions aren't\n    // created (besides potentially the onpageload transaction), no need to wrap the router.\n    if (!startTransactionOnLocationChange) return;\n\n    // `withRouter` uses `useRouter` underneath:\n    // https://github.com/vercel/next.js/blob/de42719619ae69fbd88e445100f15701f6e1e100/packages/next/client/with-router.tsx#L21\n    // Router events also use the router:\n    // https://github.com/vercel/next.js/blob/de42719619ae69fbd88e445100f15701f6e1e100/packages/next/client/router.ts#L92\n    // `Router.changeState` handles the router state changes, so it may be enough to only wrap it\n    // (instead of wrapping all of the Router's functions).\n    const routerPrototype = Object.getPrototypeOf(Router.router);\n    fill(routerPrototype, 'changeState', changeStateWrapper);\n  });\n}\n\ntype RouterChangeState = (\n  method: string,\n  url: string,\n  as: string,\n  options: Record<string, any>,\n  ...args: any[]\n) => void;\ntype WrappedRouterChangeState = RouterChangeState;\n\n/**\n * Wraps Router.changeState()\n * https://github.com/vercel/next.js/blob/da97a18dafc7799e63aa7985adc95f213c2bf5f3/packages/next/next-server/lib/router/router.ts#L1204\n * Start a navigation transaction every time the router changes state.\n */\nfunction changeStateWrapper(originalChangeStateWrapper: RouterChangeState): WrappedRouterChangeState {\n  return function wrapper(\n    this: any,\n    method: string,\n    // The parameterized url, ex. posts/[id]/[comment]\n    url: string,\n    // The actual url, ex. posts/85/my-comment\n    as: string,\n    options: Record<string, any>,\n    // At the moment there are no additional arguments (meaning the rest parameter is empty).\n    // This is meant to protect from future additions to Next.js API, especially since this is an\n    // internal API.\n    ...args: any[]\n  ): Promise<boolean> {\n    const newTransactionName = stripUrlQueryAndFragment(url);\n    // do not start a transaction if it's from the same page\n    if (startTransaction !== undefined && prevTransactionName !== newTransactionName) {\n      if (activeTransaction) {\n        activeTransaction.finish();\n      }\n      const tags: Record<string, Primitive> = {\n        ...DEFAULT_TAGS,\n        method,\n        ...options,\n      };\n      if (prevTransactionName) {\n        tags.from = prevTransactionName;\n      }\n      prevTransactionName = newTransactionName;\n      activeTransaction = startTransaction({\n        name: prevTransactionName,\n        op: 'navigation',\n        tags,\n        metadata: { source: 'route' },\n      });\n    }\n    return originalChangeStateWrapper.call(this, method, url, as, options, ...args);\n  };\n}\n"],"names":[],"mappings":";;;;;;AAgBA;;AAi}