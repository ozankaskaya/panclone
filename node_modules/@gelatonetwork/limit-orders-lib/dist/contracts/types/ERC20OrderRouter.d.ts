/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ERC20OrderRouterInterface extends ethers.utils.Interface {
  functions: {
    "depositToken(uint256,address,address,address,address,bytes,bytes32)": FunctionFragment;
    "gelatoPineCore()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositToken",
    values: [BigNumberish, string, string, string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gelatoPineCore",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gelatoPineCore",
    data: BytesLike
  ): Result;

  events: {
    "DepositToken(bytes32,address,uint256,address,address,address,address,bytes,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositToken"): EventFragment;
}

export type DepositTokenEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    key: string;
    caller: string;
    amount: BigNumber;
    module: string;
    inputToken: string;
    owner: string;
    witness: string;
    data: string;
    secret: string;
  }
>;

export class ERC20OrderRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC20OrderRouterInterface;

  functions: {
    depositToken(
      _amount: BigNumberish,
      _module: string,
      _inputToken: string,
      _owner: string,
      _witness: string,
      _data: BytesLike,
      _secret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gelatoPineCore(overrides?: CallOverrides): Promise<[string]>;
  };

  depositToken(
    _amount: BigNumberish,
    _module: string,
    _inputToken: string,
    _owner: string,
    _witness: string,
    _data: BytesLike,
    _secret: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gelatoPineCore(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    depositToken(
      _amount: BigNumberish,
      _module: string,
      _inputToken: string,
      _owner: string,
      _witness: string,
      _data: BytesLike,
      _secret: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    gelatoPineCore(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DepositToken(bytes32,address,uint256,address,address,address,address,bytes,bytes32)"(
      key?: BytesLike | null,
      caller?: string | null,
      amount?: null,
      module?: null,
      inputToken?: null,
      owner?: string | null,
      witness?: null,
      data?: null,
      secret?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      {
        key: string;
        caller: string;
        amount: BigNumber;
        module: string;
        inputToken: string;
        owner: string;
        witness: string;
        data: string;
        secret: string;
      }
    >;

    DepositToken(
      key?: BytesLike | null,
      caller?: string | null,
      amount?: null,
      module?: null,
      inputToken?: null,
      owner?: string | null,
      witness?: null,
      data?: null,
      secret?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      {
        key: string;
        caller: string;
        amount: BigNumber;
        module: string;
        inputToken: string;
        owner: string;
        witness: string;
        data: string;
        secret: string;
      }
    >;
  };

  estimateGas: {
    depositToken(
      _amount: BigNumberish,
      _module: string,
      _inputToken: string,
      _owner: string,
      _witness: string,
      _data: BytesLike,
      _secret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gelatoPineCore(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    depositToken(
      _amount: BigNumberish,
      _module: string,
      _inputToken: string,
      _owner: string,
      _witness: string,
      _data: BytesLike,
      _secret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gelatoPineCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
