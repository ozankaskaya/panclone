"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prettyPrint = exports.log = exports.Logger = exports.LogLevel = void 0;
var config_1 = __importStar(require("./config"));
var shared_1 = require("./shared");
var url = config_1.default.getLogsEndpoint();
var LOG_LEVEL = process.env.AXIOM_LOG_LEVEL || 'debug';
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["debug"] = 0] = "debug";
    LogLevel[LogLevel["info"] = 1] = "info";
    LogLevel[LogLevel["warn"] = 2] = "warn";
    LogLevel[LogLevel["error"] = 3] = "error";
    LogLevel[LogLevel["off"] = 100] = "off";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var Logger = /** @class */ (function () {
    function Logger(args, req, autoFlush, source, logLevel) {
        if (args === void 0) { args = {}; }
        if (req === void 0) { req = null; }
        if (autoFlush === void 0) { autoFlush = true; }
        if (source === void 0) { source = 'frontend'; }
        var _this = this;
        this.args = args;
        this.req = req;
        this.autoFlush = autoFlush;
        this.source = source;
        this.logEvents = [];
        this.throttledSendLogs = (0, shared_1.throttle)(this.sendLogs, 1000);
        this.children = [];
        this.debug = function (message, args) {
            if (args === void 0) { args = {}; }
            _this._log('debug', message, args);
        };
        this.info = function (message, args) {
            if (args === void 0) { args = {}; }
            _this._log('info', message, args);
        };
        this.warn = function (message, args) {
            if (args === void 0) { args = {}; }
            _this._log('warn', message, args);
        };
        this.error = function (message, args) {
            if (args === void 0) { args = {}; }
            _this._log('error', message, args);
        };
        this.with = function (args) {
            var child = new Logger(__assign(__assign({}, _this.args), args), _this.req, _this.autoFlush, _this.source);
            _this.children.push(child);
            return child;
        };
        this.withRequest = function (req) {
            return new Logger(__assign({}, _this.args), req, _this.autoFlush, _this.source);
        };
        this._log = function (level, message, args) {
            if (args === void 0) { args = {}; }
            if (LogLevel[level] < LogLevel[_this.logLevel]) {
                return;
            }
            var logEvent = { level: level, message: message, _time: new Date(Date.now()).toISOString(), fields: _this.args || {} };
            // check if passed args is an object, if its not an object, add it to fields.args
            if (typeof args === 'object' && args !== null && Object.keys(args).length > 0) {
                logEvent.fields = __assign(__assign({}, logEvent.fields), args);
            }
            else if (args && args.length) {
                logEvent.fields = __assign(__assign({}, logEvent.fields), { args: args });
            }
            config_1.default.injectPlatformMetadata(logEvent, _this.source);
            if (_this.req != null) {
                logEvent.request = _this.req;
                if (logEvent.platform) {
                    logEvent.platform.route = _this.req.path;
                }
                else if (logEvent.vercel) {
                    logEvent.vercel.route = _this.req.path;
                }
            }
            _this.logEvents.push(logEvent);
            if (_this.autoFlush) {
                _this.throttledSendLogs();
            }
        };
        this.attachResponseStatus = function (statusCode) {
            _this.logEvents = _this.logEvents.map(function (log) {
                if (log.request) {
                    log.request.statusCode = statusCode;
                }
                return log;
            });
        };
        this.flush = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(__spreadArray([this.sendLogs()], this.children.map(function (c) { return c.flush(); }), true))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.logLevel = logLevel || LOG_LEVEL || 'debug';
    }
    Logger.prototype.sendLogs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method, keepalive, body, headers, reqOptions, fetch_1, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.logEvents.length) {
                            return [2 /*return*/];
                        }
                        if (!config_1.default.isEnvVarsSet()) {
                            // if AXIOM ingesting url is not set, fallback to printing to console
                            // to avoid network errors in development environments
                            this.logEvents.forEach(function (ev) { return prettyPrint(ev); });
                            this.logEvents = [];
                            return [2 /*return*/];
                        }
                        method = 'POST';
                        keepalive = true;
                        body = JSON.stringify(this.logEvents);
                        // clear pending logs
                        this.logEvents = [];
                        headers = {
                            'content-type': 'application/json',
                        };
                        if (config_1.default.token) {
                            headers['Authorization'] = "Bearer ".concat(config_1.default.token);
                        }
                        reqOptions = { body: body, method: method, keepalive: keepalive, headers: headers };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 8, , 9]);
                        if (!(typeof fetch === 'undefined')) return [3 /*break*/, 4];
                        return [4 /*yield*/, require('whatwg-fetch')];
                    case 2:
                        fetch_1 = _a.sent();
                        return [4 /*yield*/, fetch_1(url, reqOptions)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 4:
                        if (!(config_1.default.isBrowser && config_1.isVercel && navigator.sendBeacon)) return [3 /*break*/, 5];
                        navigator.sendBeacon(url, body);
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, fetch(url, reqOptions)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        e_1 = _a.sent();
                        console.error("Failed to send logs to Axiom: ".concat(e_1));
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    return Logger;
}());
exports.Logger = Logger;
exports.log = new Logger();
var levelColors = {
    info: {
        terminal: '32',
        browser: 'lightgreen',
    },
    debug: {
        terminal: '36',
        browser: 'lightblue',
    },
    warn: {
        terminal: '33',
        browser: 'yellow',
    },
    error: {
        terminal: '31',
        browser: 'red',
    },
};
function prettyPrint(ev) {
    var hasFields = Object.keys(ev.fields).length > 0;
    // check whether pretty print is disabled
    if (shared_1.isNoPrettyPrint) {
        var msg = "".concat(ev.level, " - ").concat(ev.message);
        if (hasFields) {
            msg += ' ' + JSON.stringify(ev.fields);
        }
        console.log(msg);
        return;
    }
    // print indented message, instead of [object]
    // We use the %o modifier instead of JSON.stringify because stringify will print the
    // object as normal text, it loses all the functionality the browser gives for viewing
    // objects in the console, such as expanding and collapsing the object.
    var msgString = '';
    var args = [ev.level, ev.message];
    if (config_1.default.isBrowser) {
        msgString = '%c%s - %s';
        args = __spreadArray(["color: ".concat(levelColors[ev.level].browser, ";")], args, true);
    }
    else {
        msgString = "\u001B[".concat(levelColors[ev.level].terminal, "m%s\u001B[0m - %s");
    }
    // we check if the fields object is not empty, otherwise its printed as <empty string>
    // or just "".
    if (hasFields) {
        msgString += ' %o';
        args.push(ev.fields);
    }
    if (ev.request) {
        msgString += ' %o';
        args.push(ev.request);
    }
    console.log.apply(console, __spreadArray([msgString], args, true));
}
exports.prettyPrint = prettyPrint;
//# sourceMappingURL=logger.js.map