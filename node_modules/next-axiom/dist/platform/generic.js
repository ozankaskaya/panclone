"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shared_1 = require("../shared");
// This is the generic config class for all platforms that doesn't have a special
// implementation (e.g: vercel, netlify). All config classes extends this one.
var GenericConfig = /** @class */ (function () {
    function GenericConfig() {
        this.proxyPath = '/_axiom';
        this.isBrowser = typeof window !== 'undefined';
        this.shoudSendEdgeReport = false;
        this.token = process.env.AXIOM_TOKEN;
        this.dataset = process.env.AXIOM_DATASET;
        this.environment = process.env.NODE_ENV;
        this.axiomUrl = process.env.AXIOM_URL || 'https://cloud.axiom.co';
        this.region = process.env.REGION || undefined;
    }
    GenericConfig.prototype.isEnvVarsSet = function () {
        return !!(this.axiomUrl && process.env.AXIOM_DATASET && process.env.AXIOM_TOKEN);
    };
    GenericConfig.prototype.getIngestURL = function (_) {
        return "".concat(this.axiomUrl, "/api/v1/datasets/").concat(this.dataset, "/ingest");
    };
    GenericConfig.prototype.getLogsEndpoint = function () {
        return this.isBrowser ? "".concat(this.proxyPath, "/logs") : this.getIngestURL(shared_1.EndpointType.logs);
    };
    GenericConfig.prototype.getWebVitalsEndpoint = function () {
        return this.isBrowser ? "".concat(this.proxyPath, "/logs") : this.getIngestURL(shared_1.EndpointType.webVitals);
    };
    GenericConfig.prototype.wrapWebVitalsObject = function (metrics) {
        var _this = this;
        return metrics.map(function (m) { return ({
            webVital: m,
            _time: new Date().getTime(),
            platform: {
                environment: _this.environment,
                source: 'web-vital',
            },
        }); });
    };
    GenericConfig.prototype.injectPlatformMetadata = function (logEvent, source) {
        logEvent.platform = {
            environment: this.environment,
            region: this.region,
            source: source + '-log',
        };
    };
    GenericConfig.prototype.generateRequestMeta = function (req) {
        return {
            startTime: new Date().getTime(),
            path: req.url,
            method: req.method,
            host: this.getHeaderOrDefault(req, 'host', ''),
            userAgent: this.getHeaderOrDefault(req, 'user-agent', ''),
            scheme: 'https',
            ip: this.getHeaderOrDefault(req, 'x-forwarded-for', ''),
            region: this.region,
        };
    };
    GenericConfig.prototype.getHeaderOrDefault = function (req, headerName, defaultValue) {
        return req.headers[headerName] ? req.headers[headerName] : defaultValue;
    };
    return GenericConfig;
}());
exports.default = GenericConfig;
//# sourceMappingURL=generic.js.map