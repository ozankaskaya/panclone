"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var generic_1 = __importDefault(require("./generic"));
var ingestEndpoint = process.env.NEXT_PUBLIC_AXIOM_INGEST_ENDPOINT || process.env.AXIOM_INGEST_ENDPOINT || '';
var VercelConfig = /** @class */ (function (_super) {
    __extends(VercelConfig, _super);
    function VercelConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.provider = 'vercel';
        _this.shoudSendEdgeReport = true;
        _this.region = process.env.VERCEL_REGION || undefined;
        _this.environment = process.env.VERCEL_ENV || process.env.NODE_ENV;
        _this.token = undefined;
        _this.axiomUrl = ingestEndpoint;
        return _this;
    }
    VercelConfig.prototype.isEnvVarsSet = function () {
        return ingestEndpoint != undefined && ingestEndpoint != '';
    };
    VercelConfig.prototype.getIngestURL = function (t) {
        var url = new URL(this.axiomUrl);
        url.searchParams.set('type', t.toString());
        return url.toString();
    };
    VercelConfig.prototype.getWebVitalsEndpoint = function () {
        return "".concat(this.proxyPath, "/web-vitals");
    };
    VercelConfig.prototype.wrapWebVitalsObject = function (metrics) {
        return {
            webVitals: metrics,
            environment: this.environment,
        };
    };
    VercelConfig.prototype.injectPlatformMetadata = function (logEvent, source) {
        logEvent.vercel = {
            environment: this.environment,
            region: this.region,
            source: source,
        };
    };
    return VercelConfig;
}(generic_1.default));
exports.default = VercelConfig;
//# sourceMappingURL=vercel.js.map